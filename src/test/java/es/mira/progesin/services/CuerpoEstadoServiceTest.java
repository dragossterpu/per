package es.mira.progesin.services;

import es.mira.progesin.services.CuerpoEstadoService.*;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.mockito.BDDMockito.*;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import es.mira.progesin.persistence.entities.CuerpoEstado;
import es.mira.progesin.persistence.repositories.ICuerpoEstadoRepository;
public class CuerpoEstadoServiceTest {

	@Test
	public void type() throws Exception {
		// TODO auto-generated by JUnit Helper.
		assertThat(CuerpoEstadoService.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
		// TODO auto-generated by JUnit Helper.
		CuerpoEstadoService target = new CuerpoEstadoService();
		assertThat(target, notNullValue());
	}

	@Test
	public void findAll() throws Exception {
		// TODO auto-generated by JUnit Helper.
		CuerpoEstadoService target = new CuerpoEstadoService();
		// given
		// e.g. : given(mocked.called()).willReturn(1);
		// when
		Iterable<CuerpoEstado> actual = target.findAll();
		// then
		// e.g. : verify(mocked).called();
		Iterable<CuerpoEstado> expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void save() throws Exception {
		// TODO auto-generated by JUnit Helper.
		CuerpoEstadoService target = new CuerpoEstadoService();
		// given
		CuerpoEstado cuerpo = mock(CuerpoEstado.class);
		// e.g. : given(mocked.called()).willReturn(1);
		// when
		CuerpoEstado actual = target.save(cuerpo);
		// then
		// e.g. : verify(mocked).called();
		CuerpoEstado expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void findByFechaBajaIsNull() throws Exception {
		// TODO auto-generated by JUnit Helper.
		CuerpoEstadoService target = new CuerpoEstadoService();
		// given
		// e.g. : given(mocked.called()).willReturn(1);
		// when
		List<CuerpoEstado> actual = target.findByFechaBajaIsNull();
		// then
		// e.g. : verify(mocked).called();
		List<CuerpoEstado> expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void existeByNombreCortoIgnoreCaseAndIdNotIn() throws Exception {
		// TODO auto-generated by JUnit Helper.
		CuerpoEstadoService target = new CuerpoEstadoService();
		// given
		String nombreCorto = null;
		int id = 0;
		// e.g. : given(mocked.called()).willReturn(1);
		// when
		boolean actual = target.existeByNombreCortoIgnoreCaseAndIdNotIn(nombreCorto, id);
		// then
		// e.g. : verify(mocked).called();
		boolean expected = false;
		assertThat(actual, is(equalTo(expected)));
	}

}
